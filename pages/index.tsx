import type { NextPage } from 'next';
import Head from 'next/head';
import moment from 'moment';
import { Select, MenuItem } from '@mui/material';
import { ChangeEvent, useCallback, useEffect, useState } from 'react';
import { Box, Container, TextField, Stack, Button } from '@mui/material';
import { Time } from './timer';
import hours from './mocks/hours';
import Clock from './components/Clock';
import minutes from './mocks/minutes';
import { convertSecond, convertTime, padTime } from './utils';
import Countdown from './components/Countdown';

const Home: NextPage = () => {
  const [targetTime, setTargetTime] = useState<any>({
    hours: 0,
    minutes: 0,
  });
  const [countdownTime, setCountDownTime] = useState<Time>({
    hours: 0,
    minutes: 0,
    second: 0,
  });
  const [millisecond, setMillisecond] = useState<number>(0);
  const [enable, setEnable] = useState<boolean>(false);
  const [searchText, setSearchText] = useState<string>('');

  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {
    setSearchText(e.target.value);
  };

  const handleChangeTime = (e: any, type: string) => {
    switch (type) {
      case 'hours':
        setTargetTime({
          ...targetTime,
          hours: Number(e.target.value),
        });
        break;
      case 'minutes':
        setTargetTime({
          ...targetTime,
          minutes: Number(e.target.value),
        });
        break;

      default:
        return;
    }
  };

  const toggleAlarm = () => {
    const now = moment(new Date(), 'HH:mm:ss');
    const target = moment(Object.values(targetTime).join(':') + ':00', 'HH:mm:ss');
    const durations = moment.duration(now.diff(target));

    setCountDownTime({
      hours: Math.abs(durations.hours()),
      minutes: Math.abs(durations.minutes()),
      second: Math.abs(durations.seconds()),
    });
    if (enable) resetTimer();
    return setEnable((val: any) => !val);
  };

  useEffect(() => {
    console.log('acitve ne')
    const countdownInterval = setInterval(() => {
      if (millisecond !== 0) {
        setMillisecond((prev) => prev - 10);
      } else {
        setMillisecond(0);
        //clearInterval(handleInterval)
      }
    }, 10);
    return () => clearInterval(countdownInterval);
  }, [countdownTime, millisecond]);

  useEffect(() => {
    if (countdownTime) {
      setMillisecond(
        convertSecond(countdownTime.hours, countdownTime.minutes, countdownTime.second) *
          1000
      );
    }
  }, [countdownTime]);

  const pauseTimer = () => {
    // resetInterval
  };

  const resetTimer = () => {
    console.log('reset');
    // clearInterval
  };

  return (
    <div>
      <title>Clocks App</title>
      <Head>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Container
        sx={{
          paddingTop: '30px',
          display: 'flex',
          flexDirection: 'column',
          alignItems: 'center',
        }}
      >
        <Clock />
        {
          <h3 className="countdown">
            {padTime(countdownTime.hours)}:{padTime(countdownTime.minutes)}:
            {padTime(countdownTime.second)}
            <Countdown millisecond={millisecond} />
          </h3>
        }
        <Box sx={{ marginTop: '30px' }}>
          <Box sx={{ display: 'flex', alignItems: 'center' }}>
            <h2>Wake me up at</h2>
            <Stack
              direction="row"
              justifyContent="center"
              alignItems="center"
              spacing={2}
              sx={{ marginLeft: '30px' }}
            >
              <div>
                <Select
                  labelId="demo-simple-select-label"
                  id="demo-simple-select"
                  value={targetTime.hours}
                  onChange={(e) => handleChangeTime(e, 'hours')}
                >
                  {hours.map((hour, index) => (
                    <MenuItem key={index} value={hour}>
                      {hour}
                    </MenuItem>
                  ))}
                </Select>
              </div>
              <span style={{ fontWeight: 'bold', fontSize: '17px' }}>:</span>
              <div>
                <Select
                  labelId="demo-simple-select-label"
                  id="demo-simple-select"
                  value={targetTime.minutes}
                  onChange={(e) => handleChangeTime(e, 'minutes')}
                >
                  {minutes.map((minute, index) => (
                    <MenuItem key={index} value={minute}>
                      {minute}
                    </MenuItem>
                  ))}
                </Select>
              </div>
            </Stack>
          </Box>
        </Box>
        <Box sx={{ marginTop: '30px' }}>
          <Stack direction="row" alignItems="center" spacing={2}>
            <span>with</span>
            <TextField
              placeholder="Youtube URL or Search Term"
              value={searchText}
              onChange={handleChange}
              sx={{ width: 300 }}
            />
          </Stack>
        </Box>

        {/* Video */}
        <Button
          sx={{
            marginTop: 10,
            textTransform: 'capitalize',
            fontWeight: 'bold',
            fontSize: '20px',
          }}
          size="large"
          variant="contained"
          onClick={toggleAlarm}
        >
          {enable ? 'Disable Alarm' : 'Enable Alarm'}
        </Button>
      </Container>
    </div>
  );
};

export default Home;
